system  beta_example

root BETA_EXAMPLE : "make"

default -- section of the system

   assertion (all); -- values: boost, no, require, ensure,	
		-- invariant, loop, check, all.

   debug (yes);
      -- The default debug level for the system.
      -- Choose yes, no, or any "key" you wish.

   trace (no);
      -- The default trace mode for the system. Choose yes or no.

   collect (yes); -- garbage collector ?
   case_insensitive (no);
   no_style_warning (no);
   no_warning (no);

   verbose (no);
   manifest_string_trace (no);
   high_memory_compiler (no);	

cluster -- section

--    optional_cluster_name: "cluster_path_using_system_file_notation_here"
--       default -- at this cluster level
--          assertion (require)
--          debug (no);
--          trace (no);
--       option -- for this cluster
--          assertion (loop) : CLASS_NAME1, CLASS_NAME2;
--          assertion (all)  : CLASS_NAME3, CLASS_NAME4;
--          -- ...
--          debug (yes) : CLASS_NAME1, CLASS_NAME2, ...;
--          debug ("KEY") : CLASS_NAME1, CLASS_NAME2, ...;
--          -- ...
--          trace : CLASS_NAME1, CLASS_NAME2;
--          trace : CLASS_NAME3, CLASS_NAME4;
--          -- ...
--       end -- of one cluster
   Eiffel_GNU_Scientific_Library: "./"
   option 
   --no_style_warning (no);
      end		
   "${SmartEiffelDirectory}/lib/kernel"
   "${SmartEiffelDirectory}/lib/base"
   "${SmartEiffelDirectory}/lib/io"
   "${SmartEiffelDirectory}/lib/number"
   "${SmartEiffelDirectory}/lib/iterator"
   "${SmartEiffelDirectory}/tutorial/number"

external -- section for elements written in another language

   -- Directories where to search for C .h files:
   -- external_header_path: "/usr/local/expat/include /usr/local/include/mjpegtools"
   external_header_path: "/usr/include /usr/include/gsl"
   -- external_object_files: "foo.o bar.o"
   -- external_c_files: "foo.c bar.c"

   -- External libraries directory path to be considered; update and uncomment
   -- the following line:
   --external_lib_path: ""
   external_lib: "`/usr/bin/gsl-config --libs`"


generate -- section

   no_strip(no); -- to use a C level debugger choose yes here

   no_split(yes);      
      -- Yes would mean that you don't want one big single C file for the
     -- complete system. This may be useful for delivery of the most efficient
     -- version. (Some C compilers including gcc can then do better inlining.)

   clean(no);
     -- Yes would mean that you want to remove all generated C files, all
     -- generated object files as well as other temporary files generated
     -- during the compilation process. (See also command clean.)

   -- The equivalent of the -cc flag of the traditional command line mode.
   -- To select a different C compiler from the default, update and uncomment
   -- the following line:
   -- cc : "gcc"

   -- To decide which C compiler options are to be passed, you need to use
   -- this keyword as well as a good understanding of your C compiler.
   -- Update and uncomment the following line:
   -- c_compiler_options : "-O3 -pipe -I/usr/include"
      -- c_compiler_options: ""
   
   -- Some options are to be passed only to the linker. Update and uncomment
   -- the following line:
   -- linker_options : "-foo"

   -- For the equivalent of the -no_main flag of the traditional command line
   -- mode, uncomment the following line:
   -- no_main (yes)

   -- For the equivalent of the -gc_info flag of the traditional command line
   -- mode, uncomment the following line:
   -- gc_info (yes)

   -- For the equivalent of the -wedit flag of the traditional command line
   -- mode. To Include support for the Wedit debugger uncomment the following
   -- line:
   -- wedit (yes)


-- Additional information about system environment variables:
--    Inside manifest strings, you are allowed to use system
--    environment variables using the same notation as in the traditional
--    "loadpath.se" files. Actually, this notation is inspired by the
--    traditional UNIX bracketed notation as for example: ${FOO} or ${Bar}
--    or ${SmartEiffel}.
--
-- Additional information about the ${SmartEiffelDirectory} variable:
--    If not explicitely set by the user, the ${SmartEiffelDirectory} variable
--    is automatically computed using the value of the ${SmartEiffel} variable.
--    (Keep in mind that the ${SmartEiffel} variable is mandatory for using
--    SmartEiffel.)  The computed value indicates the SmartEiffel main
--    directory. For example, if the value of ${SmartEiffel} is
--    "/usr/local/lib/SmartEiffel/sys/system.se"
--    the computed value is "/usr/local/lib/SmartEiffel/". This automatically
--    defined variable ${SmartEiffelDirectory} is useful for indicating the
--    location of the SmartEiffel standard library.
--
end
