-- This file is part of Liberty The GNU Eiffel Compiler Tools and Libraries.
-- See the Copyright notice at the end of this file.
--
class EFFECT
   --
   -- A parser builder.
   --

inherit
   PACKRAT_REDUCER

insert
   LOGGING

create {}
   make

feature {}
   output_effect, output_reduce, output_position, output_image: TEXT_FILE_WRITE

   connect_or_die (name: ABSTRACT_STRING): TEXT_FILE_WRITE is
      do
         create Result.connect_to(name)
         if not Result.is_connected then
            std_error.put_line("Cannot write file: #(1)" # name)
            die_with_code(1)
         end
      ensure
         Result.is_connected
      end

   generate (name: FIXED_STRING; input: INPUT_STREAM) is
      local
         grammar: PACKRAT_GRAMMAR
         source: STRING
         parser: PACKRAT_PARSER; buffer: MINI_PARSER_BUFFER
         error: PARSE_ERROR
      do
         from
            source := ""
            input.read_line
         until
            input.end_of_input
         loop
            source.append(input.last_string)
            source.extend('%N')
            input.read_line
         end
         source.append(input.last_string)

         create grammar.with_reducer(Current)

         output_effect   := connect_or_die(once "#(1)_effect_grammar.e"  # name)
         output_reduce   := connect_or_die(once "#(1)_effect_reduce.e"   # name)
         output_position := connect_or_die(once "#(1)_effect_position.e" # name)
         output_image    := connect_or_die(once "#(1)_effect_image.e"    # name)

         create parser
         create buffer.initialize_with(source)
         if not parser.eval(buffer, grammar.table, "grammar") then
            if parser.error = Void then
               std_error.put_line("**** error")
            else
               from
                  error := parser.error
               until
                  error = Void
               loop
                  std_error.put_line(error.message)
                  error := error.next
               end
            end
            die_with_code(1)
         end

         -- ----------------------------------------------------------------------

         output_effect.put_string(once "[
         -- That class was generated by 'effect', please don't edit
         class #(1)_EFFECT_GRAMMAR

         insert
            PACKRAT_INTERNAL

         create {ANY}
            make

         feature {ANY}
            table: PARSE_TABLE[PACKRAT_PARSE_CONTEXT] is
               do
                  if table_memory = Void then
                     reset_table
                  end
                  Result := table_memory
               end

         feature {}
            make (a_reducer: like reducer) is
               require
                  a_reducer /= Void
               do
                  reducer := a_reducer
               ensure
                  reducer = a_reducer
               end

               reducer: #(1)_EFFECT_REDUCER

            default_table: PARSE_TABLE[PACKRAT_PARSE_CONTEXT] is
               once
                  Result := {PARSE_TABLE[PACKRAT_PARSE_CONTEXT] <<
                             >> }
               end

            table_memory: PARSE_TABLE[PACKRAT_PARSE_CONTEXT]

         invariant
            reducer /= Void

         end -- class #(1)_EFFECT_GRAMMAR

         ]" # name.as_upper)

         -- ----------------------------------------------------------------------

         output_reduce.put_string(once "[
         -- That class was generated by 'effect', please don't edit
         deferred class #(1)_EFFECT_REDUCE

         end -- class #(1)_EFFECT_REDUCE

         ]" # name.as_upper)

         -- ----------------------------------------------------------------------

         output_position.put_string(once "[
         -- That class was generated by 'effect', please don't edit
         expanded class #(1)_EFFECT_POSITION

         insert
            PACKRAT_POSITION
               export
                  {#(1)_EFFECT_GRAMMAR} default_create
               end

         end -- class #(1)_EFFECT_POSITION

         ]" # name.as_upper)

         -- ----------------------------------------------------------------------

         output_image.put_string(once "[
         -- That class was generated by 'effect', please don't edit
         expanded class #(1)_EFFECT_IMAGE

         insert
            PACKRAT_IMAGE
               export
                  {#(1)_EFFECT_GRAMMAR} make
               redefine
                  position
               end

         feature {}
            position: #(1)_EFFECT_POSITION

         end -- class #(1)_EFFECT_IMAGE

         ]" # name.as_upper)

         -- ----------------------------------------------------------------------

         output_effect.disconnect
         output_reduce.disconnect
         output_position.disconnect
         output_image.disconnect
      end

feature {}
   make is
      local
         input: REGULAR_FILE
      do
         if not arguments.parse_command_line then
            arguments.usage(std_error)
            die_with_code(1)
         elseif option_help.is_set then
            arguments.usage(std_output)
            die_with_code(0)
         elseif not arguments.parse_command_line or else not argument_file.is_set then
            arguments.usage(std_error)
            die_with_code(1)
         end

         input := argument_file.item

         if not input.name.has_suffix(".ef") then
            std_error.put_line("File does not have the right suffix (expect *.ef): #(1)" # input.path)
            die_with_code(1)
         end

         if not input.exists then
            std_error.put_line("File does not exist: #(1)" # input.path)
            die_with_code(1)
         end

         generate(input.name.substring(input.name.lower, input.name.upper - 3), input.read)
         input.read.disconnect
      end

   arguments: COMMAND_LINE_ARGUMENTS is
      once
         create Result.make(option_help or argument_file)
      end

   argument_file: COMMAND_LINE_TYPED_ARGUMENT[REGULAR_FILE] is
      once
         Result := cli_factory.positional_file("grammar.ef", "The file containing the grammar (*.ef files)")
      end

   option_help: COMMAND_LINE_TYPED_ARGUMENT[BOOLEAN] is
      once
         Result := cli_factory.option_boolean("h", "help", "Command usage")
      end

   cli_factory: COMMAND_LINE_ARGUMENT_FACTORY

feature {PACKRAT_GRAMMAR}
   reduce_nonterminal_def is
      do
      end

   reduce_grammar is
      do
      end

   reduce_pattern_first_alternative is
      do
      end

   reduce_pattern_alternative is
      do
      end

   reduce_pattern is
      do
      end

   reduce_pattern_map (alt: PACKRAT_ALTERNATIVE) is
      do
      end

   reduce_alternative_lookahead is
      do
      end

   reduce_alternative_suffix_tag is
      do
      end

   reduce_alternative_tag is
      do
      end

   reduce_alternative is
      do
      end

   reduce_quantifier is
      do
      end

   reduce_suffix is
      do
      end

   reduce_primary_as_nested_pattern is
      do
      end

   reduce_primary_as_any is
      do
      end

   reduce_primary_as_literal is
      do
      end

   reduce_primay_as_charclass is
      do
      end

   reduce_primary_as_nonterminal is
      do
      end

   reduce_literal_start is
      do
      end

   reduce_literal_string is
      do
      end

   reduce_literal is
      do
      end

   reduce_tag_start is
      do
      end

   reduce_tag_string is
      do
      end

   reduce_tag is
      do
      end

   reduce_charclass_start is
      do
      end

   reduce_charclass_range is
      do
      end

   reduce_charclass_char is
      do
      end

   reduce_charclass_class is
      do
      end

   reduce_charclass is
      do
      end

   reduce_nonterminal_name is
      do
      end

   reduce_nonterminal is
      do
      end

   reduce_space is
      do
      end

   reduce_image_left_arrow (image: PARSER_IMAGE) is
      do
      end

   reduce_image_slash (image: PARSER_IMAGE) is
      do
      end

   reduce_image_not_and (image: PARSER_IMAGE) is
      do
      end

   reduce_image_star_plus_why (image: PARSER_IMAGE) is
      do
      end

   reduce_image_open_paren (image: PARSER_IMAGE) is
      do
      end

   reduce_image_close_paren (image: PARSER_IMAGE) is
      do
      end

   reduce_image_anychar (image: PARSER_IMAGE) is
      do
      end

   reduce_image_letter (image: PARSER_IMAGE) is
      do
      end

   reduce_image_string (image: PARSER_IMAGE) is
      do
      end

   reduce_image_quote (image: PARSER_IMAGE) is
      do
      end

   reduce_image_hyphen (image: PARSER_IMAGE) is
      do
      end

   reduce_image_dot (image: PARSER_IMAGE) is
      do
      end

   reduce_image_open_bracket (image: PARSER_IMAGE) is
      do
      end

   reduce_image_close_bracket (image: PARSER_IMAGE) is
      do
      end

   reduce_image_open_curly (image: PARSER_IMAGE) is
      do
      end

   reduce_image_close_curly (image: PARSER_IMAGE) is
      do
      end

   reduce_image_space (image: PARSER_IMAGE) is
      do
      end

end -- class EFFECT
--
-- ------------------------------------------------------------------------------------------------------------------------------
-- Copyright notice below. Please read.
--
-- Liberty Eiffel is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License,
-- as published by the Free Software Foundation; either version 2, or (at your option) any later version.
-- Liberty Eiffel is distributed in the hope that it will be useful but WITHOUT ANY WARRANTY; without even the implied warranty
-- of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
-- received a copy of the GNU General Public License along with Liberty Eiffel; see the file COPYING. If not, write to the Free
-- Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
--
-- Copyright(C) 2011-2012: Cyril ADRIAN, Paolo REDAELLI
--
-- http://liberty-eiffel.blogspot.com - https://github.com/LibertyEiffel/Liberty
--
--
-- Liberty Eiffel is based on SmartEiffel (Copyrights blow)
--
-- Copyright(C) 1994-2002: INRIA - LORIA (INRIA Lorraine) - ESIAL U.H.P.       - University of Nancy 1 - FRANCE
-- Copyright(C) 2003-2006: INRIA - LORIA (INRIA Lorraine) - I.U.T. Charlemagne - University of Nancy 2 - FRANCE
--
-- Authors: Dominique COLNET, Philippe RIBET, Cyril ADRIAN, Vincent CROIZIER, Frederic MERIZEN
--
-- ------------------------------------------------------------------------------------------------------------------------------
