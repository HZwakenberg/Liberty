indexing
	description: "."
	copyright: "[
					Copyright (C) 2007 Paolo Redaelli, GTK+ team
					
					This library is free software; you can redistribute it and/or
					modify it under the terms of the GNU Lesser General Public License
					as published by the Free Software Foundation; either version 2.1 of
					the License, or (at your option) any later version.
					
					This library is distributed in the hopeOA that it will be useful, but
					WITHOUT ANY WARRANTY; without even the implied warranty of
					MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
					Lesser General Public License for more details.

					You should have received a copy of the GNU Lesser General Public
					License along with this library; if not, write to the Free Software
					Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
					02110-1301 USA
			]"

	wrapped_version: "1.2.4"

class FOO

inherit
	(SHARED_?)C_STRUCT

insert
	FOO_EXTERNALS

creation make, from_external_pointer

feature {} -- Creation

	--   Link: Cairo: A Vector Graphics Library (start)
	--   Link: Surfaces (parent)
	--   Link: Surfaces (previous)
	--   Link: Image Surfaces (next)
	--   Link: Part I. Tutorial (part)
	--   Link: Part II. Reference (part)
	--   Link: Drawing (chapter)
	--   Link: Fonts (chapter)
	--   Link: Surfaces (chapter)
	--   Link: Utilities (chapter)
	--   Link: Index (index)
	--   Link: Index of new symbols in 1.2 (index)
	--   Link: Appendix A. Creating a language binding for cairo (appendix)
	--
	--   Prev Up Home             Cairo: A Vector Graphics Library             Next
	--   Top  |  Description
	--
	--   cairo_surface_t
	--
	--   cairo_surface_t -- Base class for surfaces
	--
	--Synopsis
	--
	--
	--
	--
	-- typedef     cairo_surface_t;
	-- enum        cairo_content_t;
	-- cairo_surface_t* cairo_surface_create_similar
	--                                             (cairo_surface_t *other,
	--                                              cairo_content_t content,
	--                                              int width,
	--                                              int height);
	-- void        cairo_surface_destroy           (cairo_surface_t *surface);
	-- void        cairo_surface_finish            (cairo_surface_t *surface);
	-- void        cairo_surface_flush             (cairo_surface_t *surface);
	-- void        cairo_surface_get_font_options  (cairo_surface_t *surface,
	--                                              cairo_font_options_t *options);
	-- cairo_content_t cairo_surface_get_content   (cairo_surface_t *surface);
	-- cairo_status_t cairo_surface_set_user_data  (cairo_surface_t *surface,
	--                                              const cairo_user_data_key_t *key,
	--                                              void *user_data,
	--                                              cairo_destroy_func_t destroy);
	-- void*       cairo_surface_get_user_data     (cairo_surface_t *surface,
	--                                              const cairo_user_data_key_t *key);
	-- void        cairo_surface_mark_dirty        (cairo_surface_t *surface);
	-- void        cairo_surface_mark_dirty_rectangle
	--                                             (cairo_surface_t *surface,
	--                                              int x,
	--                                              int y,
	--                                              int width,
	--                                              int height);
	-- cairo_surface_t* cairo_surface_reference    (cairo_surface_t *surface);
	-- void        cairo_surface_set_device_offset (cairo_surface_t *surface,
	--                                              double x_offset,
	--                                              double y_offset);
	-- void        cairo_surface_get_device_offset (cairo_surface_t *surface,
	--                                              double *x_offset,
	--                                              double *y_offset);
	-- void        cairo_surface_set_fallback_resolution
	--                                             (cairo_surface_t *surface,
	--                                              double x_pixels_per_inch,
	--                                              double y_pixels_per_inch);
	-- cairo_status_t cairo_surface_status         (cairo_surface_t *surface);
	-- enum        cairo_surface_type_t;
	-- cairo_surface_type_t cairo_surface_get_type (cairo_surface_t *surface);
	--
	--Description
	--
	--Details
	--
	--  cairo_surface_t
	--
	-- typedef struct _cairo_surface cairo_surface_t;
	--
	--   A cairo_surface_t represents an image, either as the destination of a
	--   drawing operation or as source when drawing onto another surface. There
	--   are different subtypes of cairo_surface_t for different drawing backends;
	--   for example, cairo_image_surface_create() creates a bitmap image in
	--   memory.
	--
	--   Memory management of cairo_surface_t is done with
	--   cairo_surface_reference() and cairo_surface_destroy().
	--
	--   --------------------------------------------------------------------------
	--
	--  enum cairo_content_t
	--
	-- typedef enum _cairo_content {
	--     CAIRO_CONTENT_COLOR         = 0x1000,
	--     CAIRO_CONTENT_ALPHA         = 0x2000,
	--     CAIRO_CONTENT_COLOR_ALPHA   = 0x3000
	-- } cairo_content_t;
	--
	--   cairo_content_t is used to describe the content that a surface will
	--   contain, whether color information, alpha information (translucence vs.
	--   opacity), or both.
	--
	--   Note: The large values here are designed to keep cairo_content_t values
	--   distinct from cairo_format_t values so that the implementation can detect
	--   the error if users confuse the two types.
	--
	--   CAIRO_CONTENT_COLOR       The surface will hold color content only.
	--   CAIRO_CONTENT_ALPHA       The surface will hold alpha content only.
	--   CAIRO_CONTENT_COLOR_ALPHA The surface will hold color and alpha content.
	--
	--   --------------------------------------------------------------------------
	--
	--  cairo_surface_create_similar ()
	--
	-- cairo_surface_t* cairo_surface_create_similar
	--                                             (cairo_surface_t *other,
	--                                              cairo_content_t content,
	--                                              int width,
	--                                              int height);
	--
	--   Create a new surface that is as compatible as possible with an existing
	--   surface. For example the new surface will have the same fallback
	--   resolution and font options as other. Generally, the new surface will also
	--   use the same backend as other, unless that is not possible for some
	--   reason. The type of the returned surface may be examined with
	--   cairo_surface_get_type().
	--
	--   Initially the surface contents are all 0 (transparent if contents have
	--   transparency, black otherwise.)
	--
	--   other :   an existing surface used to select the backend of the new
	--             surface
	--   content : the content for the new surface
	--   width :   width of the new surface, (in device-space units)
	--   height :  height of the new surface (in device-space units)
	--   Returns : a pointer to the newly allocated surface. The caller owns the
	--             surface and should call cairo_surface_destroy when done with it.
	--             This function always returns a valid pointer, but it will return
	--             a pointer to a "nil" surface if other is already in an error
	--             state or any other error occurs.
	--
	--   --------------------------------------------------------------------------
	--
	--  cairo_surface_destroy ()
	--
	-- void        cairo_surface_destroy           (cairo_surface_t *surface);
	--
	--   Decreases the reference count on surface by one. If the result is zero,
	--   then surface and all associated resources are freed. See
	--   cairo_surface_reference().
	--
	--   surface : a cairo_t
	--
	--   --------------------------------------------------------------------------
	--
	--  cairo_surface_finish ()
	--
	-- void        cairo_surface_finish            (cairo_surface_t *surface);
	--
	--   This function finishes the surface and drops all references to external
	--   resources. For example, for the Xlib backend it means that cairo will no
	--   longer access the drawable, which can be freed. After calling
	--   cairo_surface_finish() the only valid operations on a surface are getting
	--   and setting user data and referencing and destroying it. Further drawing
	--   to the surface will not affect the surface but will instead trigger a
	--   CAIRO_STATUS_SURFACE_FINISHED error.
	--
	--   When the last call to cairo_surface_destroy() decreases the reference
	--   count to zero, cairo will call cairo_surface_finish() if it hasn't been
	--   called already, before freeing the resources associated with the surface.
	--
	--   surface : the cairo_surface_t to finish
	--
	--   --------------------------------------------------------------------------
	--
	--  cairo_surface_flush ()
	--
	-- void        cairo_surface_flush             (cairo_surface_t *surface);
	--
	--   Do any pending drawing for the surface and also restore any temporary
	--   modification's cairo has made to the surface's state. This function must
	--   be called before switching from drawing on the surface with cairo to
	--   drawing on it directly with native APIs. If the surface doesn't support
	--   direct access, then this function does nothing.
	--
	--   surface : a cairo_surface_t
	--
	--   --------------------------------------------------------------------------
	--
	--  cairo_surface_get_font_options ()
	--
	-- void        cairo_surface_get_font_options  (cairo_surface_t *surface,
	--                                              cairo_font_options_t *options);
	--
	--   Retrieves the default font rendering options for the surface. This allows
	--   display surfaces to report the correct subpixel order for rendering on
	--   them, print surfaces to disable hinting of metrics and so forth. The
	--   result can then be used with cairo_scaled_font_create().
	--
	--   surface : a cairo_surface_t
	--   options : a cairo_font_options_t object into which to store the retrieved
	--             options. All existing values are overwritten
	--
	--   --------------------------------------------------------------------------
	--
	--  cairo_surface_get_content ()
	--
	-- cairo_content_t cairo_surface_get_content   (cairo_surface_t *surface);
	--
	--   surface : a cairo_surface_t
	--   Returns : The content type of surface which indicates whether the surface
	--             contains color and/or alpha information. See cairo_content_t.
	--
	--   Since 1.2
	--
	--   --------------------------------------------------------------------------
	--
	--  cairo_surface_set_user_data ()
	--
	-- cairo_status_t cairo_surface_set_user_data  (cairo_surface_t *surface,
	--                                              const cairo_user_data_key_t *key,
	--                                              void *user_data,
	--                                              cairo_destroy_func_t destroy);
	--
	--   Attach user data to surface. To remove user data from a surface, call this
	--   function with the key that was used to set it and NULL for data.
	--
	--   surface :   a cairo_surface_t
	--   key :       the address of a cairo_user_data_key_t to attach the user data
	--               to
	--   user_data : the user data to attach to the surface
	--   destroy :   a cairo_destroy_func_t which will be called when the surface
	--               is destroyed or when new user data is attached using the same
	--               key.
	--   Returns :   CAIRO_STATUS_SUCCESS or CAIRO_STATUS_NO_MEMORY if a slot could
	--               not be allocated for the user data.
	--
	--   --------------------------------------------------------------------------
	--
	--  cairo_surface_get_user_data ()
	--
	-- void*       cairo_surface_get_user_data     (cairo_surface_t *surface,
	--                                              const cairo_user_data_key_t *key);
	--
	--   Return user data previously attached to surface using the specified key.
	--   If no user data has been attached with the given key this function returns
	--   NULL.
	--
	--   surface : a cairo_surface_t
	--   key :     the address of the cairo_user_data_key_t the user data was
	--             attached to
	--   Returns : the user data previously attached or NULL.
	--
	--   --------------------------------------------------------------------------
	--
	--  cairo_surface_mark_dirty ()
	--
	-- void        cairo_surface_mark_dirty        (cairo_surface_t *surface);
	--
	--   Tells cairo that drawing has been done to surface using means other than
	--   cairo, and that cairo should reread any cached areas. Note that you must
	--   call cairo_surface_flush() before doing such drawing.
	--
	--   surface : a cairo_surface_t
	--
	--   --------------------------------------------------------------------------
	--
	--  cairo_surface_mark_dirty_rectangle ()
	--
	-- void        cairo_surface_mark_dirty_rectangle
	--                                             (cairo_surface_t *surface,
	--                                              int x,
	--                                              int y,
	--                                              int width,
	--                                              int height);
	--
	--   Like cairo_surface_mark_dirty(), but drawing has been done only to the
	--   specified rectangle, so that cairo can retain cached contents for other
	--   parts of the surface.
	--
	--   Any cached clip set on the surface will be reset by this function, to make
	--   sure that future cairo calls have the clip set that they expect.
	--
	--   surface : a cairo_surface_t
	--   x :       X coordinate of dirty rectangle
	--   y :       Y coordinate of dirty rectangle
	--   width :   width of dirty rectangle
	--   height :  height of dirty rectangle
	--
	--   --------------------------------------------------------------------------
	--
	--  cairo_surface_reference ()
	--
	-- cairo_surface_t* cairo_surface_reference    (cairo_surface_t *surface);
	--
	--   Increases the reference count on surface by one. This prevents surface
	--   from being destroyed until a matching call to cairo_surface_destroy() is
	--   made.
	--
	--   surface : a cairo_surface_t
	--   Returns : the referenced cairo_surface_t.
	--
	--   --------------------------------------------------------------------------
	--
	--  cairo_surface_set_device_offset ()
	--
	-- void        cairo_surface_set_device_offset (cairo_surface_t *surface,
	--                                              double x_offset,
	--                                              double y_offset);
	--
	--   Sets an offset that is added to the device coordinates determined by the
	--   CTM when drawing to surface. One use case for this function is when we
	--   want to create a cairo_surface_t that redirects drawing for a portion of
	--   an onscreen surface to an offscreen surface in a way that is completely
	--   invisible to the user of the cairo API. Setting a transformation via
	--   cairo_translate() isn't sufficient to do this, since functions like
	--   cairo_device_to_user() will expose the hidden offset.
	--
	--   Note that the offset affects drawing to the surface as well as using the
	--   surface in a source pattern.
	--
	--   surface :  a cairo_surface_t
	--   x_offset : the offset in the X direction, in device units
	--   y_offset : the offset in the Y direction, in device units
	--
	--   --------------------------------------------------------------------------
	--
	--  cairo_surface_get_device_offset ()
	--
	-- void        cairo_surface_get_device_offset (cairo_surface_t *surface,
	--                                              double *x_offset,
	--                                              double *y_offset);
	--
	--   This function returns the previous device offset set by
	--   cairo_surface_set_device_offset().
	--
	--   surface :  a cairo_surface_t
	--   x_offset : the offset in the X direction, in device units
	--   y_offset : the offset in the Y direction, in device units
	--
	--   Since 1.2
	--
	--   --------------------------------------------------------------------------
	--
	--  cairo_surface_set_fallback_resolution ()
	--
	-- void        cairo_surface_set_fallback_resolution
	--                                             (cairo_surface_t *surface,
	--                                              double x_pixels_per_inch,
	--                                              double y_pixels_per_inch);
	--
	--   Set the horizontal and vertical resolution for image fallbacks.
	--
	--   When certain operations aren't supported natively by a backend, cairo will
	--   fallback by rendering operations to an image and then overlaying that
	--   image onto the output. For backends that are natively vector-oriented,
	--   this function can be used to set the resolution used for these image
	--   fallbacks, (larger values will result in more detailed images, but also
	--   larger file sizes).
	--
	--   Some examples of natively vector-oriented backends are the ps, pdf, and
	--   svg backends.
	--
	--   For backends that are natively raster-oriented, image fallbacks are still
	--   possible, but they are always performed at the native device resolution.
	--   So this function has no effect on those backends.
	--
	--   NOTE: The fallback resolution only takes effect at the time of completing
	--   a page (with cairo_show_page() or cairo_copy_page()) so there is currently
	--   no way to have more than one fallback resolution in effect on a single
	--   page.
	--
	--   surface :           a cairo_surface_t
	--   x_pixels_per_inch : horizontal setting for pixels per inch
	--   y_pixels_per_inch : vertical setting for pixels per inch
	--
	--   Since 1.2
	--
	--   --------------------------------------------------------------------------
	--
	--  cairo_surface_status ()
	--
	-- cairo_status_t cairo_surface_status         (cairo_surface_t *surface);
	--
	--   Checks whether an error has previously occurred for this surface.
	--
	--   surface : a cairo_surface_t
	--   Returns : CAIRO_STATUS_SUCCESS, CAIRO_STATUS_NULL_POINTER,
	--             CAIRO_STATUS_NO_MEMORY, CAIRO_STATUS_READ_ERROR,
	--             CAIRO_STATUS_INVALID_CONTENT, CAIRO_STATUS_INVALUE_FORMAT, or
	--             CAIRO_STATUS_INVALID_VISUAL.
	--
	--   --------------------------------------------------------------------------
	--
	--  enum cairo_surface_type_t
	--
	-- typedef enum _cairo_surface_type {
	--     CAIRO_SURFACE_TYPE_IMAGE,
	--     CAIRO_SURFACE_TYPE_PDF,
	--     CAIRO_SURFACE_TYPE_PS,
	--     CAIRO_SURFACE_TYPE_XLIB,
	--     CAIRO_SURFACE_TYPE_XCB,
	--     CAIRO_SURFACE_TYPE_GLITZ,
	--     CAIRO_SURFACE_TYPE_QUARTZ,
	--     CAIRO_SURFACE_TYPE_WIN32,
	--     CAIRO_SURFACE_TYPE_BEOS,
	--     CAIRO_SURFACE_TYPE_DIRECTFB,
	--     CAIRO_SURFACE_TYPE_SVG
	-- } cairo_surface_type_t;
	--
	--   cairo_surface_type_t is used to describe the type of a given surface. The
	--   surface types are also known as "backends" or "surface backends" within
	--   cairo.
	--
	--   The type of a surface is determined by the function used to create it,
	--   which will generally be of the form cairo_type_surface_create, (though see
	--   cairo_surface_create_similar as well).
	--
	--   The surface type can be queried with cairo_surface_get_type()
	--
	--   The various cairo_surface functions can be used with surfaces of any type,
	--   but some backends also provide type-specific functions that must only be
	--   called with a surface of the appropriate type. These functions have names
	--   that begin with cairo_type_surface such as
	--   cairo_image_surface_get_width().
	--
	--   The behavior of calling a type-specific function with a surface of the
	--   wrong type is undefined.
	--
	--   New entries may be added in future versions.
	--
	--   CAIRO_SURFACE_TYPE_IMAGE    The surface is of type image
	--   CAIRO_SURFACE_TYPE_PDF      The surface is of type pdf
	--   CAIRO_SURFACE_TYPE_PS       The surface is of type ps
	--   CAIRO_SURFACE_TYPE_XLIB     The surface is of type xlib
	--   CAIRO_SURFACE_TYPE_XCB      The surface is of type xcb
	--   CAIRO_SURFACE_TYPE_GLITZ    The surface is of type glitz
	--   CAIRO_SURFACE_TYPE_QUARTZ   The surface is of type quartz
	--   CAIRO_SURFACE_TYPE_WIN32    The surface is of type win32
	--   CAIRO_SURFACE_TYPE_BEOS     The surface is of type beos
	--   CAIRO_SURFACE_TYPE_DIRECTFB The surface is of type directfb
	--   CAIRO_SURFACE_TYPE_SVG      The surface is of type svg
	--
	--   Since 1.2
	--
	--   --------------------------------------------------------------------------
	--
	--  cairo_surface_get_type ()
	--
	-- cairo_surface_type_t cairo_surface_get_type (cairo_surface_t *surface);
	--
	--   This function returns the type of the backend used to create a surface.
	--   See cairo_surface_type_t for available types.
	--
	--   surface : a cairo_surface_t
	--   Returns : The type of surface.
	--
	--   Since 1.2

end -- class FOO
