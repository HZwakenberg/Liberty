   Link: [1]GnomeVFS - Filesystem Abstraction library (start)
   Link: [2]Introduction to GnomeVFS (parent)
   Link: [3]Introduction to GnomeVFS (previous)
   Link: [4]Initialization/Shutdown (next)
   Link: [5]Introduction to GnomeVFS (chapter)
   Link: [6]Basic Data Types (chapter)
   Link: [7]Files and Directories Manipulation (chapter)
   Link: [8]Volumes and Drives Handling (chapter)
   Link: [9]Networking (chapter)
   Link: [10]MIME Registry (chapter)
   Link: [11]Filesystem Modules (chapter)

   [12]Prev [13]Up [14]Home    GnomeVFS - Filesystem Abstraction     [15]Next
                                            library

A Gentle Programming Primer

   Using GnomeVFS in an existing application, or writing a new application
   with it, is actually very simple since GnomeVFS tries to mimic POSIX file
   access syntax and semantics. That means that most "standard unix calls"
   have a GnomeVFS equivalent that operates in a fairly similar manner. There
   are a few differences to keep in mind.

     o The most obvious is probably that all I/O operations return a
       GnomeVFSResult indicating the success or failure of the operation.
       More on this later.

     o The types may be slightly different (but still parallel), for example
       rather than using an int for a file-descriptor, GnomeVFS uses
       GnomeVFSHandle, a handle to a particular URI.

     o Most operations come in Handle (think file descriptor) and URI form.
       The URI form may be more convenient if you do not want to track
       handles, etc, but just be aware that both are at your disposal and may
       be used interchangably. For example gnome_vfs_open and
       gnome_vfs_open_uri.

   By way of example, consider the basic read command:

         ssize_t read (int fd, void *buf, size_t count);


   The GnomeVFS equivalent is very similar, but you will notice slightly
   different data types. The consistent returning of a GnomeVFSResult also
   necessitated moving the return value of read into a pass-back-value
   pointer bytes_read:

         GnomeVFSResult gnome_vfs_read (GnomeVFSHandle *handle,
                                        gpointer buffer,
                                        GnomeVFSFileSize bytes,
                                        GnomeVFSFileSize *bytes_read);


   So gnome_vfs_read takes a GnomeVFSHandle, which functions like a file
   descriptor, and attempts to read bytes bytes out of handle into buffer.
   The number of bytes succesfully read into buffer is returned in the
   pointer bytes_read. The return value of the function, a GnomeVFSResult
   indicates the success of the operation or any errors that might have
   occurred (for example, permission denied). GnomeVFSResult is just an
   enumeration.

  Simple Sample Program

   Now lets write a simple program to copy a fixed number of bytes from one
   file and append it to another file.


 #include <stdio.h>
 #include <libgnomevfs/gnome-vfs.h>
 #include <libgnomevfs/gnome-vfs-utils.h>

 #define BYTES_TO_PROCESS 256

 int print_error (GnomeVFSResult result, const char *uri_string);

 int
 main (int argc, char **argv)
 {
   GnomeVFSHandle *read_handle, *write_handle;
   char *input_uri_string;
   char *output_uri_string = argv[2];
   GnomeVFSFileSize bytes_read, bytes_written;
   guint buffer[BYTES_TO_PROCESS];
   GnomeVFSResult result;

   /* remember to initialize GnomeVFS! */
   if (!gnome_vfs_init ()) {
     printf ("Could not initialize GnomeVFS\n");
     return 1;
   }

   /* Convert the user supplied filenames into proper GnomeVFS URIs */
   input_uri_string = gnome_vfs_make_uri_from_shell_arg (argv[1]);
   output_uri_string = gnome_vfs_make_uri_from_shell_arg (argv[2]);

   /* open the input file for read access */
   result = gnome_vfs_open (&read_handle, input_uri_string, GNOME_VFS_OPEN_READ);
   /* if the operation was not successful, print the error and abort */
   if (result != GNOME_VFS_OK) return print_error (result, input_uri_string);

   /* we use create instead of open, because open will not create the file if it does
      not already exist. The last argument is the permissions to use if the file is created,
      the second to last tells GnomeVFS that its ok if the file already exists, and just open it */
   result = gnome_vfs_create (&write_handle, output_uri_string, GNOME_VFS_OPEN_WRITE, FALSE, 0777);
   if (result != GNOME_VFS_OK) return print_error (result, output_uri_string);

   /* read data from the input uri */
   result = gnome_vfs_read (read_handle, buffer, BYTES_TO_PROCESS, &bytes_read);
   if (result != GNOME_VFS_OK) return print_error (result, input_uri_string);

   /* seek to the end of the output uri so we will append rather than overwrite */
   /* therefore, we seek 0 bytes relative to the end of the file */
   result = gnome_vfs_seek (write_handle, GNOME_VFS_SEEK_END, 0);

   /* now write the data we read out to the output uri */
   result = gnome_vfs_write (write_handle, buffer, bytes_read, &bytes_written);
   if (result != GNOME_VFS_OK) return print_error (result, output_uri_string);

   g_free (input_uri_string);
   g_free (output_uri_string);

   return 0;
 }

 int
 print_error (GnomeVFSResult result, const char *uri_string)
 {
   const char *error_string;
   /* get the string corresponding to this GnomeVFSResult value */
   error_string = gnome_vfs_result_to_string (result);
   printf ("Error %s occured opening location %s\n", error_string, uri_string);
   return 1;
 }



  Conversion of a Sample Code Block

References

   Visible links
   1. file:///home/paolo/tmp/gnome-vfs-2.0/index.html
   2. file:///home/paolo/tmp/gnome-vfs-2.0/about.html
   3. file:///home/paolo/tmp/gnome-vfs-2.0/about.html
   4. file:///home/paolo/tmp/gnome-vfs-2.0/gnome-vfs-20-gnome-vfs-init.html
   5. file:///home/paolo/tmp/gnome-vfs-2.0/about.html
   6. file:///home/paolo/tmp/gnome-vfs-2.0/data-types.html
   7. file:///home/paolo/tmp/gnome-vfs-2.0/gnome-vfs-file-and-dirs-ops.html
   8. file:///home/paolo/tmp/gnome-vfs-2.0/volumes.html
   9. file:///home/paolo/tmp/gnome-vfs-2.0/networking.html
  10. file:///home/paolo/tmp/gnome-vfs-2.0/mime-registry.html
  11. file:///home/paolo/tmp/gnome-vfs-2.0/modules.html
  12. file:///home/paolo/tmp/gnome-vfs-2.0/about.html
  13. file:///home/paolo/tmp/gnome-vfs-2.0/about.html
  14. file:///home/paolo/tmp/gnome-vfs-2.0/index.html
  15. file:///home/paolo/tmp/gnome-vfs-2.0/gnome-vfs-20-gnome-vfs-init.html
